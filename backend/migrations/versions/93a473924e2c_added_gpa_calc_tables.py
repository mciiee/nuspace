"""added GPA calc tables

Revision ID: 93a473924e2c
Revises: fb04158b1dea
Create Date: 2025-09-12 10:53:07.207977

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '93a473924e2c'
down_revision: Union[str, Sequence[str], None] = 'fb04158b1dea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('school', sa.Enum('GSB', 'GSE', 'GSPP', 'SEDS', 'SMG', 'SoM', 'SSH', 'Other', name='school_type'), nullable=False),
    sa.Column('level', sa.Enum('GrM', 'ND', 'PhD', 'UG', name='level_type'), nullable=False),
    sa.Column('course_code', sa.String(length=128), nullable=False),
    sa.Column('section', sa.String(length=64), nullable=True),
    sa.Column('faculty', sa.String(length=512), nullable=True),
    sa.Column('credits', sa.Integer(), nullable=True),
    sa.Column('term', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_courses_course_code'), 'courses', ['course_code'], unique=False)
    op.create_index(op.f('ix_courses_faculty'), 'courses', ['faculty'], unique=False)
    op.create_index(op.f('ix_courses_id'), 'courses', ['id'], unique=False)
    op.create_index(op.f('ix_courses_level'), 'courses', ['level'], unique=False)
    op.create_index(op.f('ix_courses_school'), 'courses', ['school'], unique=False)
    op.create_index(op.f('ix_courses_term'), 'courses', ['term'], unique=False)
    op.create_table('student_courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_sub', sa.String(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_sub'], ['users.sub'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_student_courses_course_id'), 'student_courses', ['course_id'], unique=False)
    op.create_index(op.f('ix_student_courses_id'), 'student_courses', ['id'], unique=False)
    op.create_index(op.f('ix_student_courses_student_sub'), 'student_courses', ['student_sub'], unique=False)
    op.create_table('course_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_course_id', sa.Integer(), nullable=False),
    sa.Column('item_name', sa.String(length=256), nullable=False),
    sa.Column('total_weight_pct', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('obtained_score_pct', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['student_course_id'], ['student_courses.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_items_id'), 'course_items', ['id'], unique=False)
    op.create_index(op.f('ix_course_items_student_course_id'), 'course_items', ['student_course_id'], unique=False)
    op.alter_column('notifications', 'notification_source',
               existing_type=postgresql.ENUM('products', 'community_events', 'communities', 'community_posts', 'reviews', 'community_comments', 'grade_reports', name='entity_type'),
               type_=sa.String(),
               existing_nullable=False)
    
    # Check if 'courses' enum value already exists before adding it
    op.execute("""
        DO $$ 
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'courses' AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'entity_type')) THEN
                ALTER TYPE entity_type ADD VALUE 'courses';
            END IF;
        END $$;
    """)
    


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_index(op.f('ix_course_items_student_course_id'), table_name='course_items')
    op.drop_index(op.f('ix_course_items_id'), table_name='course_items')
    op.drop_table('course_items')
    op.drop_index(op.f('ix_student_courses_student_sub'), table_name='student_courses')
    op.drop_index(op.f('ix_student_courses_id'), table_name='student_courses')
    op.drop_index(op.f('ix_student_courses_course_id'), table_name='student_courses')
    op.drop_table('student_courses')
    op.drop_index(op.f('ix_courses_term'), table_name='courses')
    op.drop_index(op.f('ix_courses_school'), table_name='courses')
    op.drop_index(op.f('ix_courses_level'), table_name='courses')
    op.drop_index(op.f('ix_courses_id'), table_name='courses')
    op.drop_index(op.f('ix_courses_faculty'), table_name='courses')
    op.drop_index(op.f('ix_courses_course_code'), table_name='courses')
    op.drop_table('courses')
    op.execute("DROP TYPE IF EXISTS school_type CASCADE")
    op.execute("DROP TYPE IF EXISTS level_type CASCADE")
