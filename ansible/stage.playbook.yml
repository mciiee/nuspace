---
- name: Deploy Docker Containers
  hosts: webservers
  become: true
  vars:
    docker_username: "{{ docker_user }}"
    docker_password: "{{ docker_pass }}"
    ansible_user: "{{ ansible_user_var }}"
    image_tag: "{{ docker_image_tag }}"

  tasks:
    - name: Check current container status
      ansible.builtin.shell: |
        docker ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}\t{{ '{{.Image}}' }}" | grep -E "(fastapi|celery-worker|nginx|redis|rabbitmq|prometheus|grafana|loki|alloy|alertmanager|wireguard)" || echo "No containers found"
      register: container_status
      changed_when: false
      args:
        executable: /bin/bash

    - name: Display container status
      ansible.builtin.debug:
        msg: "Current container status: {{ container_status.stdout_lines }}"

    - name: Check if git is installed
      ansible.builtin.command: git --version
      register: git_check
      failed_when: false
      changed_when: false

    - name: Install git if not present
      ansible.builtin.package:
        name: git
        state: present
      when: git_check.rc != 0

    - name: Check if docker is installed
      ansible.builtin.command: docker --version
      register: docker_check
      failed_when: false
      changed_when: false

    - name: Install docker if not present
      ansible.builtin.package:
        name: docker
        state: present
      when: docker_check.rc != 0

    - name: Ensure docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure ansible service account user is in docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Check if gcloud is installed
      ansible.builtin.command: gcloud --version
      register: gcloud_check
      failed_when: false
      changed_when: false

    - name: Install Google Cloud SDK if not present
      ansible.builtin.shell: |
        curl -sSL https://sdk.cloud.google.com | bash
        echo 'source /root/google-cloud-sdk/path.bash.inc' >> /root/.bashrc
        echo 'source /root/google-cloud-sdk/completion.bash.inc' >> /root/.bashrc
      args:
        executable: /bin/bash
      when: gcloud_check.rc != 0

    - name: Configure gcloud to use VM service account and project
      ansible.builtin.shell: |
        export PATH="/root/google-cloud-sdk/bin:$PATH"
        gcloud config set project nuspace-staging
        # The VM already has the service account attached, so gcloud will use it automatically
      args:
        executable: /bin/bash

    - name: Ensure OS Login user exists and has proper permissions
      ansible.builtin.shell: |
        # Get the current OS Login user
        CURRENT_USER=$(whoami)
        echo "Current user: $CURRENT_USER"
        
        # Ensure the user exists and has sudo access
        if ! id "$CURRENT_USER" &>/dev/null; then
          echo "Creating user $CURRENT_USER"
          useradd -m -s /bin/bash "$CURRENT_USER"
        fi
        
        # Add user to sudo group if not already there
        if ! groups "$CURRENT_USER" | grep -q sudo; then
          usermod -aG sudo "$CURRENT_USER"
        fi
        
        # Add user to docker group if not already there
        if ! groups "$CURRENT_USER" | grep -q docker; then
          usermod -aG docker "$CURRENT_USER"
        fi
        
        echo "User $CURRENT_USER configured with sudo and docker access"
      args:
        executable: /bin/bash

    - name: Pull latest changes from git repository
      ansible.builtin.git:
        repo: "https://github.com/ulanpy/nuspace.git"
        dest: "/home/{{ ansible_user }}/nuspace"
        version: dev
        force: yes

    - name: Create SSL directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/nuspace/ssl"
        state: directory
        mode: '0755'

    - name: Pull cloudflare.crt from Google Secret Manager
      ansible.builtin.shell: |
        export PATH="/root/google-cloud-sdk/bin:$PATH"
        gcloud secrets versions access latest --secret="cloudflare-crt" --project="nuspace-staging" > /home/{{ ansible_user }}/nuspace/ssl/cloudflare.crt
      args:
        creates: "/home/{{ ansible_user }}/nuspace/ssl/cloudflare.crt"
        executable: /bin/bash

    - name: Pull cloudflare.key from Google Secret Manager
      ansible.builtin.shell: |
        export PATH="/root/google-cloud-sdk/bin:$PATH"
        gcloud secrets versions access latest --secret="cloudflare-key" --project="nuspace-staging" > /home/{{ ansible_user }}/nuspace/ssl/cloudflare.key
      args:
        creates: "/home/{{ ansible_user }}/nuspace/ssl/cloudflare.key"
        executable: /bin/bash

    - name: Set proper permissions for SSL files
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - "/home/{{ ansible_user }}/nuspace/ssl/cloudflare.crt"
        - "/home/{{ ansible_user }}/nuspace/ssl/cloudflare.key"

    - name: Pull .env from Google Secret Manager
      ansible.builtin.shell: |
        export PATH="/root/google-cloud-sdk/bin:$PATH"
        gcloud secrets versions access latest --secret="nuspace-env" --project="nuspace-staging" > /home/{{ ansible_user }}/nuspace/infra/.env
      args:
        creates: "/home/{{ ansible_user }}/nuspace/infra/.env"
        executable: /bin/bash

    - name: Set proper permissions for .env file
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/nuspace/infra/.env"
        mode: '0600'

    - name: Log in to Docker Hub
      community.docker.docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"

    - name: Check which containers need to be started/restarted
      ansible.builtin.shell: |
        #!/bin/bash
        set -euo pipefail
        # Check if containers are running and get their image tags
        docker ps --format "{{ '{{.Names}}' }}\t{{ '{{.Image}}' }}" | grep -E "(fastapi|celery-worker|nginx|redis|rabbitmq|prometheus|grafana|loki|alloy|alertmanager|wireguard)" > /tmp/running_containers.txt 2>/dev/null || true
        
        # Check if any containers are missing or need restart
        MISSING_CONTAINERS=""
        NEED_RESTART=""
        
        # Check each expected container
        for container in fastapi celery-worker nginx redis rabbitmq prometheus grafana loki alloy alertmanager wireguard; do
          if ! grep -q "^${container}" /tmp/running_containers.txt; then
            MISSING_CONTAINERS="${MISSING_CONTAINERS} ${container}"
          elif [[ "${BACKEND_CHANGED:-false}" == "true" && "$container" =~ ^(fastapi|celery-worker)$ ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${FRONTEND_CHANGED:-false}" == "true" && "$container" == "nginx" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${NGINX_CHANGED:-false}" == "true" && "$container" == "nginx" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${REDIS_CHANGED:-false}" == "true" && "$container" == "redis" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${RABBITMQ_CHANGED:-false}" == "true" && "$container" == "rabbitmq" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${PROMETHEUS_CHANGED:-false}" == "true" && "$container" == "prometheus" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${GRAFANA_CHANGED:-false}" == "true" && "$container" == "grafana" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${LOKI_CHANGED:-false}" == "true" && "$container" == "loki" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${ALLOY_CHANGED:-false}" == "true" && "$container" == "alloy" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${ALERTMANAGER_CHANGED:-false}" == "true" && "$container" == "alertmanager" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          elif [[ "${WIREGUARD_CHANGED:-false}" == "true" && "$container" == "wireguard" ]]; then
            NEED_RESTART="${NEED_RESTART} ${container}"
          fi
        done
        
        echo "MISSING_CONTAINERS=${MISSING_CONTAINERS}" > /tmp/container_actions.txt
        echo "NEED_RESTART=${NEED_RESTART}" >> /tmp/container_actions.txt
        echo "Missing: ${MISSING_CONTAINERS}"
        echo "Need restart: ${NEED_RESTART}"
      register: container_analysis
      changed_when: false
      args:
        executable: /bin/bash

    - name: Display container analysis
      ansible.builtin.debug:
        msg: "{{ container_analysis.stdout_lines }}"

    - name: Pull backend image for migrations
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        pull fastapi
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (backend_changed | default(false)) | bool or "'fastapi' in container_analysis.stdout"

    - name: Run DB migrations (alembic upgrade head)
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        run --rm migrate
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (backend_changed | default(false)) | bool or "'fastapi' in container_analysis.stdout"

    - name: Pull celery worker image
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        pull celery-worker
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (backend_changed | default(false)) | bool or "'celery-worker' in container_analysis.stdout"

    - name: Recreate backend services (fastapi, celery-worker)
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d fastapi celery-worker
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (backend_changed | default(false)) | bool or "'fastapi' in container_analysis.stdout or 'celery-worker' in container_analysis.stdout"

    - name: Pull frontend builder image
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        pull frontend-builder
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (frontend_changed | default(false)) | bool

    - name: Run frontend build (frontend-builder)
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up --no-deps frontend-builder
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (frontend_changed | default(false)) | bool

    - name: Recreate nginx service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d nginx
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (nginx_changed | default(false)) | bool or "'nginx' in container_analysis.stdout"

    - name: Recreate redis service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d redis
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (redis_changed | default(false)) | bool or "'redis' in container_analysis.stdout"

    - name: Recreate rabbitmq service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d rabbitmq
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (rabbitmq_changed | default(false)) | bool or "'rabbitmq' in container_analysis.stdout"

    - name: Recreate prometheus service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d prometheus
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (prometheus_changed | default(false)) | bool or "'prometheus' in container_analysis.stdout"

    - name: Recreate grafana service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d grafana
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (grafana_changed | default(false)) | bool or "'grafana' in container_analysis.stdout"

    - name: Recreate loki service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d loki
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (loki_changed | default(false)) | bool or "'loki' in container_analysis.stdout"

    - name: Recreate alloy service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d alloy
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (alloy_changed | default(false)) | bool or "'alloy' in container_analysis.stdout"

    - name: Recreate alertmanager service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d alertmanager
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (alertmanager_changed | default(false)) | bool or "'alertmanager' in container_analysis.stdout"

    - name: Recreate wireguard service
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d wireguard
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (wireguard_changed | default(false)) | bool or "'wireguard' in container_analysis.stdout"

    - name: Reconcile docker compose changes (definitions only)
      ansible.builtin.command: >
        docker compose -f /home/{{ ansible_user }}/nuspace/infra/prod.docker-compose.yml
        up -d --remove-orphans
      environment:
        DOCKER_IMAGE_TAG: "{{ image_tag }}"
      when: (compose_changed | default(false)) | bool


    - name: Show final container status
      ansible.builtin.shell: |
        echo "=== Final Container Status ==="
        docker ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}\t{{ '{{.Image}}' }}" | grep -E "(fastapi|celery-worker|nginx|redis|rabbitmq|prometheus|grafana|loki|alloy|alertmanager|wireguard)" || echo "No containers found"
        echo "=== All Containers ==="
        docker ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}"
      register: final_status
      changed_when: false

    - name: Display final status
      ansible.builtin.debug:
        msg: "{{ final_status.stdout_lines }}"

    - name: Prune all unused Docker assets
      ansible.builtin.command: docker system prune -a -f
      changed_when: false

    - name: Ensure DOCKER_IMAGE_TAG is set correctly in user's .bashrc
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        regexp: "^export DOCKER_IMAGE_TAG="
        line: "export DOCKER_IMAGE_TAG={{ image_tag }}"
        create: yes
