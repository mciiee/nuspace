name: Terraform Stage Deploy

on:
  push:
    branches:
      - dev

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            nginx:
              - 'infra/nginx/**'
            redis:
              - 'infra/redis/**'
            rabbitmq:
              - 'infra/rabbitmq/**'
            prometheus:
              - 'infra/prometheus/**'
            grafana:
              - 'infra/grafana/**'
            loki:
              - 'infra/loki/**'
            alloy:
              - 'infra/alloy/**'
            alertmanager:
              - 'infra/alertmanager/**'
            wireguard:
              - 'infra/wireguard/**'
            compose:
              - 'infra/prod.docker-compose.yml'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # --- Build FastAPI Image ---
      - name: Build and Push FastAPI Image
        if: steps.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: kamikadze24/fastapi:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=fastapi
          cache-to: type=gha,mode=max,scope=fastapi

      # --- Build Celery Worker Image ---
      - name: Build and Push Celery Worker Image
        if: steps.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile_celery
          push: true
          tags: kamikadze24/celeryworker:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=celeryworker
          cache-to: type=gha,mode=max,scope=celeryworker

      # --- Build Frontend Builder Image ---
      - name: Build and Push Frontend Builder Image
        if: steps.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile_static_builder
          push: true
          tags: kamikadze24/frontendbuilder:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Ansible and Google Cloud SDK
        run: |
          pip install ansible
          curl -sSL https://sdk.cloud.google.com | bash
          echo "$HOME/google-cloud-sdk/bin" >> $GITHUB_PATH

      - name: Authenticate with Google Cloud
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' | tr -d '\n' | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project nuspace-staging

      - name: Get VM information and Docker credentials from Secret Manager
        id: secrets
        run: |
          # Get VM instance details using the service account
          VM_INFO=$(gcloud compute instances describe nuspace-instance --zone=europe-central2-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
          SA_USERNAME=$(gcloud compute os-login describe-profile --format="value(posixAccounts[0].username)")
          DOCKER_USERNAME=$(gcloud secrets versions access latest --secret="docker-username")
          DOCKER_PASSWORD=$(gcloud secrets versions access latest --secret="docker-password")
          echo "ANSIBLE_HOST=$VM_INFO" >> $GITHUB_OUTPUT
          echo "ANSIBLE_USER=$SA_USERNAME" >> $GITHUB_OUTPUT
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
          echo "::add-mask::$DOCKER_PASSWORD"
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_OUTPUT

      - name: Create inventory file
        run: |
          cat > ansible/inventory.yml << EOF
          ---
          all:
            children:
              webservers:
                hosts:
                  ${{ steps.secrets.outputs.ANSIBLE_HOST }}:
                    ansible_user: ${{ steps.secrets.outputs.ANSIBLE_USER }}
                    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          EOF

      - name: Run Ansible Playbook
        if: |
          steps.changes.outputs.backend == 'true' ||
          steps.changes.outputs.frontend == 'true' ||
          steps.changes.outputs.nginx == 'true' ||
          steps.changes.outputs.redis == 'true' ||
          steps.changes.outputs.rabbitmq == 'true' ||
          steps.changes.outputs.prometheus == 'true' ||
          steps.changes.outputs.grafana == 'true' ||
          steps.changes.outputs.loki == 'true' ||
          steps.changes.outputs.alloy == 'true' ||
          steps.changes.outputs.alertmanager == 'true' ||
          steps.changes.outputs.wireguard == 'true' ||
          steps.changes.outputs.compose == 'true'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          # Test OS Login connection
          gcloud compute ssh ${{ steps.secrets.outputs.ANSIBLE_HOST }} --zone=europe-central2-a --command="echo 'OS Login configured'" --ssh-flag="-o ConnectTimeout=10" --quiet || true
          
          ansible-playbook ansible/stage.playbook.yml \
            --inventory ansible/inventory.yml \
            --user "${{ steps.secrets.outputs.ANSIBLE_USER }}" \
            --ssh-common-args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            --extra-vars "docker_image_tag=${{ steps.meta.outputs.version }} ansible_user_var=${{ steps.secrets.outputs.ANSIBLE_USER }} docker_user=${{ steps.secrets.outputs.DOCKER_USERNAME }} docker_pass=${{ steps.secrets.outputs.DOCKER_PASSWORD }} backend_changed=${{ steps.changes.outputs.backend }} frontend_changed=${{ steps.changes.outputs.frontend }} nginx_changed=${{ steps.changes.outputs.nginx }} redis_changed=${{ steps.changes.outputs.redis }} rabbitmq_changed=${{ steps.changes.outputs.rabbitmq }} prometheus_changed=${{ steps.changes.outputs.prometheus }} grafana_changed=${{ steps.changes.outputs.grafana }} loki_changed=${{ steps.changes.outputs.loki }} alloy_changed=${{ steps.changes.outputs.alloy }} alertmanager_changed=${{ steps.changes.outputs.alertmanager }} wireguard_changed=${{ steps.changes.outputs.wireguard }} compose_changed=${{ steps.changes.outputs.compose }}"
